<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java反序列化-反射</title>
    <url>/2021/09/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>准备花段时间复习、学习下Java反序列化相关内容，为尽量防止学习知识再次一知半解，尽可能记录下；此为第一篇：Java反射相关知识。</p>
<blockquote>
<p> 很多知识一知半解导致需要花费更多的时间去弥补。。。</p>
</blockquote>
<h1 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h1><p>如何根据配置的类名称和方法名称实现对象的创建及方法调用呢？</p>
<p>例如，在配置文件config.properties中配置了类名称和方法名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classPath=com.ttestoo.model.Person</span><br><span class="line">methodName=getName</span><br></pre></td></tr></table></figure>

<p>如果此时想通过读取解析配置文件尝试进行实例化是不可行的，因为此时读取到的classPath变量是String类型，无法通过new 类名()的方式实例化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 通过Properties读取配置文件内容</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.load(new FileInputStream(&quot;java-sec-study/java-reflection/src/main/resources/config.properties&quot;));</span><br><span class="line"></span><br><span class="line">String classPath = properties.getProperty(&quot;classPath&quot;);</span><br><span class="line">System.out.println(classPath + &quot;运行类型：&quot; + classPath.getClass());</span><br><span class="line"></span><br><span class="line">String methodName = properties.getProperty(&quot;methodName&quot;);</span><br><span class="line">System.out.println(methodName + &quot;运行类型：&quot; + methodName.getClass());</span><br><span class="line"></span><br><span class="line">new classPath();	//报错</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%B0%84/1631114870125-46100f67-29b4-40b9-924b-8e58fc531f7b-20210910144849854.png" alt="img"></p>
<p>针对此种场景，原有的方式无法满足我们的需求，即根据配置文件内容实例化com.ttestoo.model.Person类并调用其getName方法；</p>
<p>那么如何实现上述需求呢？这里就需要借助反射机制来实现。  </p>
<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>Class类可理解为就是一个普通的类，也是继承了Object类，只是名字、作用比较特殊而已：</p>
<p><img src="/2021/09/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%B0%84/1631187738500-af9f100b-f9bd-495b-9ea8-ad1d8bd43ae6-20210910144849852.png" alt="img"></p>
<p>在类加载阶段将会自动为每个类创建对应的Class类对象，且每个类仅存在一个Class类对象（类只加载一次）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//类只加载一次</span><br><span class="line">Class&lt;?&gt; aClass2 = Class.forName(&quot;com.ttestoo.model.Person&quot;);</span><br><span class="line">Class&lt;?&gt; aClass3 = Class.forName(&quot;com.ttestoo.model.Person&quot;);</span><br><span class="line">System.out.println(aClass2.hashCode());     //856419764</span><br><span class="line">System.out.println(aClass3.hashCode());     //856419764</span><br></pre></td></tr></table></figure>



<p>可以通过如下方式获取一个类对应的Class类对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1、Class类的静态方法forName()：</span><br><span class="line">Class&lt;?&gt; aClass1 = Class.forName(&quot;com.ttestoo.model.Person&quot;);</span><br><span class="line">System.out.println(aClass1);	//class com.ttestoo.model.Person</span><br><span class="line"></span><br><span class="line">//2、类名.class：</span><br><span class="line">Class aClass2 = Person.class;</span><br><span class="line">System.out.println(aClass2);	//class com.ttestoo.model.Person</span><br><span class="line"></span><br><span class="line">//3、对象.getClass()：</span><br><span class="line">Person person = new Person();</span><br><span class="line">Class&lt;? extends Person&gt; aClass3 = person.getClass();</span><br><span class="line">System.out.println(aClass3);	//class com.ttestoo.model.Person</span><br><span class="line"></span><br><span class="line">//4、通过类加载器获取：</span><br><span class="line">//得到Person类加载器</span><br><span class="line">ClassLoader classLoader = person.getClass().getClassLoader();</span><br><span class="line">//通过Person类加载起得到Class对象</span><br><span class="line">Class&lt;?&gt; aClass4 = classLoader.loadClass(&quot;com.ttestoo.model.Person&quot;);</span><br><span class="line">System.out.println(aClass4);	//class com.ttestoo.model.Person</span><br><span class="line"></span><br><span class="line">//5、基本数据类型可通过.class得到Class类对象</span><br><span class="line">Class&lt;Integer&gt; integerClass = int.class;</span><br><span class="line">Class&lt;Character&gt; characterClass = char.class;</span><br><span class="line">Class&lt;Boolean&gt; booleanClass = boolean.class;</span><br><span class="line">System.out.println(integerClass);   	//int</span><br><span class="line"></span><br><span class="line">//6、基本数据类型对应的包装类，可通过.TYPE得到Class类对象</span><br><span class="line">Class&lt;Integer&gt; type1 = Integer.TYPE;</span><br><span class="line">System.out.println(type1);  	//int</span><br><span class="line">Class&lt;Character&gt; type2 = Character.TYPE;</span><br><span class="line">System.out.println(type2);		//char</span><br><span class="line">Class&lt;Byte&gt; type3 = Byte.TYPE;</span><br><span class="line">System.out.println(type3);		//byte</span><br><span class="line"></span><br><span class="line">//注意：int、Integer的Class类对象为同一个，其他类似</span><br><span class="line">System.out.println(integerClass.hashCode());		//621009875</span><br><span class="line">System.out.println(type1.hashCode());		//621009875</span><br></pre></td></tr></table></figure>



<p>通过Class类对象可以获取到对应类的所有信息，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Class#getName			//获取全类名</span><br><span class="line">java.lang.Class#newInstance		//创建对象实例</span><br><span class="line">java.lang.Class#getField		//获取对象相关属性</span><br><span class="line">java.lang.Class#getFields		//获取对象所有属性</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><p>反射机制允许程序在执行时获取类的成员变量、成员方法等内部信息，并可直接操作对象属性及方法等；为静态语言Java赋予了动态特性（即常说的动态类加载），可动态的创建和使用对象；是框架底层的核心。</p>
<p>静态类加载：在编译java文件时进行相关类的加载，未找到则直接编译阶段报错；</p>
<p>动态类加载：在运行javac文件时按需进行相关类的加载，未用到的类不影响程序的运行；</p>
<p>针对上述存在的问题，通过反射机制实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取com.ttestoo.model.Person类的Class类型对象</span><br><span class="line">Class&lt;?&gt; aClass = Class.forName(classPath);</span><br><span class="line"></span><br><span class="line">      // 获取com.ttestoo.model.Person类的实例化对象</span><br><span class="line">      Object o = aClass.newInstance();</span><br><span class="line"></span><br><span class="line">      // 获取com.ttestoo.model.Person类getName的 方法对象</span><br><span class="line">      Method method = aClass.getMethod(methodName);</span><br><span class="line"></span><br><span class="line">      // 反射：方法.invoke(对象)  传统：对象.方法()</span><br><span class="line">      Object result = method.invoke(o);</span><br><span class="line"></span><br><span class="line">      System.out.println(result.getClass());  // class java.lang.String</span><br><span class="line">System.out.println(result); // 李白</span><br></pre></td></tr></table></figure>



<h1 id="反射在安全中的应用"><a href="#反射在安全中的应用" class="headerlink" title="反射在安全中的应用"></a>反射在安全中的应用</h1><p>以上了解了反射机制相关的基础知识，下面主要介绍反射<strong>相关知识</strong>在安全中的应用；</p>
<p>1、通过newInstance()调用public的无参构造器来实例化类</p>
<p>此种情况适用于目标类中存在public的无参构造方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Address &#123;</span><br><span class="line">    public String province = &quot;海南&quot;;</span><br><span class="line">    public String city = &quot;海口&quot;;</span><br><span class="line">    private String street = &quot;街道&quot;;</span><br><span class="line"></span><br><span class="line">    //无参构造</span><br><span class="line">    public Address() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">//获取Address类的Class对象</span><br><span class="line">Class&lt;?&gt; aClass = Class.forName(&quot;com.ttestoo.model.Address&quot;);</span><br><span class="line"></span><br><span class="line">//通过public的无参构造创建实例</span><br><span class="line">Object address1 = aClass.newInstance();</span><br><span class="line">System.out.println(address1.toString());    //Address&#123;province=&#x27;海南&#x27;, city=&#x27;海口&#x27;, street=&#x27;街道&#x27;&#125;</span><br></pre></td></tr></table></figure>



<p>2、通过getConstructor()调用public的有参构造器来实例化类</p>
<p>实际进行安全问题利用过程中，常常发现直接使用newInstance()是不行的，主要由于newInstance()作用是调用public的无参构造器，而目标类可能不存在public的无参构造器，例如：java.lang.Runtime类的构造方法是私有的，获取Runtime实例化对象需要通过静态的getRuntime()方法：</p>
<p><img src="/2021/09/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%B0%84/1631202079533-10aee06d-6c6a-4d4f-af6f-a71a7a3cf39a-20210910144849924.png" alt="img"></p>
<p>如果直接通过newInstance()创建目标类对象，则会报错：java.lang.IllegalAccessException</p>
<p><img src="/2021/09/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%B0%84/1631201773693-988ebcee-3c9f-4865-97b0-15c6ecf65243-20210910144849905.png" alt="img"></p>
<p>可通过getRuntime()方法实现实例化创建并执行危险函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">// Object o = aClass.newInstance();</span><br><span class="line">// System.out.println(o.getClass());</span><br><span class="line">Method getRuntime = aClass.getMethod(&quot;getRuntime&quot;);</span><br><span class="line">Object runtime = getRuntime.invoke(aClass);</span><br><span class="line"></span><br><span class="line">Method exec = aClass.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line">exec.invoke(runtime, &quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;);</span><br></pre></td></tr></table></figure>

<p>现象解释：</p>
<p>类构造方法为私有的，常见于“单例设计模式”，例如：数据库连接只需建立一次，则可将构造方法私有化，通过一个静态方法来获取建议连接的对象。</p>
<p>当存在public的有参构造器时，可通过getConstructor()函数实现目标类的实例化；最常见的就是java.lang.ProcessBuilder类，存在两个public的有参构造器：</p>
<p><img src="/2021/09/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%B0%84/1631202533908-bd4a8ec0-e163-46ed-abe4-eb327f452cfc-20210910144849945.png" alt="img"></p>
<p>针对java.lang.ProcessBuilder类，可通过start()方法执行恶意命令；</p>
<p>第一种 ProcessBuilder(List<String> command) 实现：</String></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取java.lang.ProcessBuilder类对应的Class类对象</span><br><span class="line">Class&lt;?&gt; aClass1 = Class.forName(&quot;java.lang.ProcessBuilder&quot;);</span><br><span class="line"></span><br><span class="line">//获取java.lang.ProcessBuilder类start方法的 Method对象</span><br><span class="line">Method start1 = aClass1.getMethod(&quot;start&quot;);</span><br><span class="line"></span><br><span class="line">//获取java.lang.ProcessBuilder类的第一种有参构造方法</span><br><span class="line">Constructor&lt;?&gt; constructor1 = aClass1.getConstructor(List.class);</span><br><span class="line"></span><br><span class="line">//构造方法调用newInstance()即可实例化目标类，其中参数为对应构造方法所需参数，这里为List&lt;String&gt;类型数据</span><br><span class="line">Object o1 = constructor1.newInstance(Arrays.asList(&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;));</span><br><span class="line"></span><br><span class="line">//反射执行java.lang.ProcessBuilder类的start方法</span><br><span class="line">start1.invoke(o1);</span><br></pre></td></tr></table></figure>

<p>第二种 ProcessBuilder(String… command) 实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取java.lang.ProcessBuilder类对应的Class类对象</span><br><span class="line">Class&lt;?&gt; aClass2 = Class.forName(&quot;java.lang.ProcessBuilder&quot;);</span><br><span class="line"></span><br><span class="line">//获取java.lang.ProcessBuilder类start方法的 Method对象</span><br><span class="line">Method start2 = aClass2.getMethod(&quot;start&quot;);</span><br><span class="line"></span><br><span class="line">//获取java.lang.ProcessBuilder类的第二种有参构造方法</span><br><span class="line">Constructor&lt;?&gt; constructor2 = aClass2.getConstructor(String[].class);</span><br><span class="line"></span><br><span class="line">//构造方法调用newInstance()即可实例化目标类，其中参数为对应构造方法所需参数，这里为List&lt;String&gt;类型数据</span><br><span class="line">Object o2 = constructor2.newInstance(new String[][]&#123;&#123;&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;&#125;&#125;);</span><br><span class="line"></span><br><span class="line">//反射执行java.lang.ProcessBuilder类的start方法</span><br><span class="line">start2.invoke(o2);</span><br></pre></td></tr></table></figure>



<p>3、通过getDeclaredConstructor()调用private的构造器来实例化类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getDeclaredConstructor()：获取目标类中定义的所有构造器，包括私有构造器；</span><br><span class="line">getDeclaredMethod()：获取目标类中定义的所有方法，包括私有；</span><br><span class="line">其他类似...</span><br></pre></td></tr></table></figure>

<p>例如，针对java.lang.Runtime类，其构造器为私有，也可通过getDeclaredConstructor()实现类的实例化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass3 = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt; declaredConstructor = aClass3.getDeclaredConstructor();</span><br><span class="line">//暴破，修改作用域，通过反射访问private构造器</span><br><span class="line">declaredConstructor.setAccessible(true);</span><br><span class="line">Object o = declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">Method exec3 = aClass3.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line"></span><br><span class="line">exec3.invoke(o, &quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;);</span><br></pre></td></tr></table></figure>



<h1 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h1><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/422128255425528">Java安全漫谈</a></p>
<p><a href="https://www.oracle.com/technical-resources/articles/java/javareflection.html">https://www.oracle.com/technical-resources/articles/java/javareflection.html</a></p>
]]></content>
      <categories>
        <category>反序列化</category>
        <category>Java Sec</category>
      </categories>
      <tags>
        <tag>反射</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
</search>
